[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a blog about Bayesian computation and related topics. The blog is currently edited by Nicolas Chopin, Julyan Arbel, and Rémi Bardenet; feel free to contact us, via GitHub or email, and contribute a post. The blog is a continuation of a former wordpress version."
  },
  {
    "objectID": "posts/01-11-2023-repelled-point-processes/repelled_point_processes.html",
    "href": "posts/01-11-2023-repelled-point-processes/repelled_point_processes.html",
    "title": "Coulomb rhymes with variance reduction",
    "section": "",
    "text": "… Well, it does rhyme if you read the title aloud with a French accent, hon hon hon.\nTo paraphrase Nicolas’s previous post, say I want to approximate the integral \\[\n    I(f) := \\int_{S} f(u) du,\n\\] where \\(S\\) is a compact set of \\(\\mathbb{R}^d\\). I could use plain old Monte Carlo with \\(N\\) nodes, \\[\n    \\hat{I}(f) = \\frac 1 N \\sum_{i=1}^N f(U_i),   \\quad U_i \\sim \\mathrm{U}(S).\n\\tag{1}\\] Intuitively, an i.i.d. uniform sample of quadrature nodes \\(U_1, \\dots, U_N\\) will however leave “holes”; see Figure 1 (a). In words, given a realization of the nodes, it is possible to insert a few large balls in \\(S\\) that do not contain any \\(U_i\\). These holes may make us miss some large variations of \\(f\\). Part of the variance of the Monte Carlo estimator in Equation 1 could intuitively be removed if we managed to fill these holes, using some of the nodes that got lumped together by chance.\nMany sampling algorithms, such as randomized quasi-Monte Carlo, impose similar space-filling constraints, yielding a random sample with guarantees of “well-spreadedness”. In the paper I describe in this post, Diala Hawat and her two advisors (Raphaël Lachièze-Rey and myself) obtained variance reduction by explicitly trying to fill the holes left by a realization of \\(U_1, \\dots, U_N\\). In the remainder of the post, I will describe Diala’s main theoretical result.\n\n\n\n\n\n\n\n\n\n\n\n(a) A Poisson sample\n\n\n\n\n\n\n\n\n\n\n\n(b) The same sample after repulsion\n\n\n\n\n\n\n\nFigure 1: Note how the repelled sample has fewer visible “holes” and “lumps”. The details of how we implemented the repulsion are interesting in themselves, and can be found in the paper and the associated code.\n\n\n\nThe basic intuition is to imagine the quadrature nodes \\(U_1, \\dots, U_N\\) as electrons. In physics, electrons (like all charged particles) are subject to the Coulomb force. The Coulomb force exerted by one electron onto another points away from the first electron, with a magnitude that is inversely proportional to the \\(d-1\\)th power of the Euclidean distance between the two. As a result, electrons tend to repel each other, and electrons close to you will push you away harder than electrons at the other side of the support of \\(f\\). This is the behaviour that we would like to emulate, so that our quadrature nodes avoid lumping together and rather go and fill holes where no particle causes any repulsion.\nIf we solved the differential equation implementing Coulomb’s repulsion on our \\(N\\) i.i.d. nodes, however, the points would rapidly leave the support of \\(f\\) and “go to infinity”, to make sure that the pairwise distances between nodes are as large as possible. One way to avoid this undesired behaviour is to consider an “infinite” uniform Monte Carlo sample in \\(\\mathbb{R}^d\\), so that, wherever an electron looks, there are an infinite number of electrons preventing it from escaping. To make the situation comparable with our initial \\(N\\)-point estimator in Equation 1, we also require that there are roughly \\(N\\) points inside the region \\(S\\) where we integrate \\(f\\). Formally, we consider a homogeneous Poisson point process \\(\\mathcal{P}\\) of intensity \\(\\rho = N/V\\) in \\(\\mathbb{R}^d\\), where \\(V\\) is the volume of \\(S\\). Consider the modified Monte Carlo estimator \\[\n    \\tilde{I}(f) = \\frac{1}{N} \\sum_{x\\in S\\cap\\mathcal{P}} f(x).\n\\] This estimator is very similar to the \\(N\\)-point crude Monte Carlo estimator \\(\\hat{I}(f)\\), except the number of evaluations of \\(f\\) in the sum is now Poisson-distributed, with mean and variance \\(N\\). What we have gained is that we can now intuitively apply the Coulomb force to the points of \\(\\mathcal{P}\\), and hope that both before and after repulsion, about \\(N\\) points remain in our integration domain \\(S\\). Proving this remains technically thorny, however. For starters, for \\(x\\) in \\(\\mathbb{R}^d\\), the series defining the Coulomb force exerted on \\(x\\) by a collection \\(C\\) of points in \\(\\mathbb{R}^d\\), namely \\[\n    F_C(x) = \\sum_{y\\in C, y\\neq x} \\frac{x-y}{\\Vert x-y\\Vert^{d}},\n\\] is not absolutely convergent, so that the order of summation matters. However, it was observed as early as 1943 that, if you sum by increasing distance to the reference point \\(x\\), and \\(C=\\mathcal{P}\\) is a homogeneous Poisson point process, then the (random) series \\(F_\\mathcal{P}(x)\\) converges almost surely. Interested readers are referred to a classical paper by Chatterjee, Peled, Peres, and Romik (2010) on the gravitational allocation of Poisson points, one of the inspirations behind Diala’s work.\nPutting (important) technical issues aside, we are ready to state the main result of our paper. We prove that, for \\(\\epsilon\\in(-1,1)\\), the repelled Poisson point process \\[\n    \\Pi_\\epsilon\\mathcal{P} = \\{ x+\\epsilon F_{\\mathcal{P}}(x), \\quad x\\in\\mathcal{P} \\}\n\\] is well-defined, and has on average \\(N\\) points in \\(S\\). Moreover, \\[\n    \\check{I}(f) = \\frac{1}{N} \\sum_{x\\in S\\cap \\Pi_\\epsilon\\mathcal{P}} f(x)\n\\] is an unbiased estimator of \\(I(f)\\). Finally, if \\(f\\) is \\(C^2\\), for \\(\\epsilon&gt;0\\) small enough, the variance of \\(\\check{I}(f)\\) is lower than that of \\(\\tilde{I}(f)\\). To sum up, for any \\(C^2\\) integrand, we can in principle reduce the variance of our Monte Carlo estimator by slightly repelling the quadrature nodes away from each other. This is it: by breaking lumps and filling holes in a postprocessing step, we obtain variance reduction over crude Monte Carlo. The proof is not trivial, and relies on the super-harmonicity of the potential behind the Coulomb force.\nLet me close with two further pointers to the paper. First, we discuss a particular value of the “step size” parameter \\(\\epsilon\\) in the paper, which has an easily-implemented closed form, and reliably led to variance reduction across our experiments. Second, while our theoretical results only cover the Poisson case so far, we also show experiments on other (stationary) point processes than Poisson, which confirm that variance reduction is also achieved across point processes with varying second-order structure. In Monte Carlo terms, and being very optimistic, some sort of repulsion might become a standard postprocessing step in the future, to reduce the variance of one’s estimator, independently of the law of the nodes (Markov chain, thinned PDMP, you name it)."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome to the new, quarto-based version of Statisfaction",
    "section": "",
    "text": "Hey! We have just moved this blog from Wordpress to github. The old version is still available here. The new version is based on quarto, which will make it much easier to write mathematics, e.g. \\(\\pi(\\theta|x) \\propto \\pi(\\theta)\nL(x|\\theta)\\), and code, e.g. \nimport numpy as np\n\ndef fact(n):\n    return np.prod(range(1, n + 1))"
  },
  {
    "objectID": "posts/01-09-2023-particles-v0.4/index.html",
    "href": "posts/01-09-2023-particles-v0.4/index.html",
    "title": "particles version 0.4: single-run variance estimates, FFBS variants, nested sampling",
    "section": "",
    "text": "Version 0.4 of particles have just been released. Here are the main changes:\n\nSingle-run variance estimation for waste-free SMC\nWaste-free SMC (Dau & Chopin, 2020) was already implemented in particles (since version 0.3), and even proposed by default. This is a variant of SMC samplers where you resample only \\(M \\ll\nN\\) particles, apply to each resampled particle \\(P-1\\) MCMC steps, and then gather these \\(M\\times P\\) states to form the next particle sample; see the paper if you want to know why this is a good idea (short version: this tends to perform better than standard SMC samplers, and to be more robust to the choice of the number of MCMC steps).\nWhat was not yet implemented (but is, in this version) is the single-run variance estimates proposed in the same paper. Here is a simple illustration:\n\n\n\n\n\n\n\n\n\n\nBoth plots were obtained from \\(10^3\\) runs of waste-free IBIS (i.e. target at time \\(t\\) is the posterior based on the first \\(t+1\\) observations, \\(p(\\theta|y_{0:t})\\)) applied to Bayesian logistic regression and the Pima Indians dataset. The red line is the empirical variance of the output, and, since the number of runs is large, it should be close to the true variance. The lower (resp. upper) limit of the grey area is the \\(5\\%\\) (resp. \\(95\\%\\)) quantile of the single-run variance estimates obtained from these \\(10^3\\) runs. The considered output is either the posterior mean of the intercept (top) or the log marginal likelihood (bottom).\nWe can see from these plots that these single-run estimates are quite reliable, and make it possible, in case one uses IBIS, to obtain error bars even from a single run. See the documentation of module smc_samplers (or the scripts in papers/wastefreeSMC) for more details on how you may get such estimates.\n\n\nNew FFBS variants\nI have already mentioned in a previous post, on the old blog, that particles now implement new FFBS algorithms (i.e. particle smoothing algorithms that rely on a backward step) that were proposed in this paper. On top of that, particles now also includes a hybrid version of the Paris algorithm.\n\n\nNested sampling\nI was invited to this nested sampling workshop in Munich, so this gave me some incentive to:\n\nclean up and document the “vanilla” nested sampling implementation which was in module nested.\nadd to the same module the NS-SMC samplers of Salomone et al (2018) to play with them and do some numerical experiments to illustrate my talk.\n\nI will blog shortly about the interesting results I found (which essentially are in line with Salmone et al).\n\n\nOther minor changes\nSeveral distributions and a dataset (Liver) were added, see the change log.\n\n\nLogo\nI’ve added a logo. It’s… not great, if anyone has suggestions on how to design a better log, I am all ears.\n\n\nWhat’s next?\nI guess what’s still missing from the package are stuff like:\n\nthe ensemble Kalman filter, which would be reasonably easy to add, and would be useful in various problems;\nadvanced methods to design better proposals, such as controlled SMC (Heng et al, 2020) or the iterated auxiliary particle filter (Guarniero et al, 2017).\n\nIf you have other ideas, let me know.\n\n\nFeedback\nI have not yet looked into how to enable comments on a quarto blog. You can comment by replying to this post on Mastodon, or to the same post on LinkedIn (coming soon); or you can raise an issue on github or send me an e-mail, of course."
  },
  {
    "objectID": "posts/30-06-2025-nested-sampling-experiments/index.html",
    "href": "posts/30-06-2025-nested-sampling-experiments/index.html",
    "title": "Nested sampling and SMC: numerical experiments",
    "section": "",
    "text": "\\[\n\\newcommand{\\ind}{\\mathbb{1}}\n\\]\n\nBy “popular” demand (i.e., Adrien asked for it), here are the numerical experiments I promised in my previous post. I did these experiments initially to illustrate some points in the talk I gave at MaxEnt 2023.\n\nNS-SMC vs tempering SMC for a Gaussian-like target\nSalomone et al discuss how NS (nested sampling, both the vanilla and the SMC versions) may outperform tempering whenever the target distribution exhibits pathologies such as phase transition. It is not easy (to me at least) to grasp how phase transition may occur in a Bayesian posterior, but I suspect it tends to occur when the posterior is multi-modal. Please have a look at their paper for more details on this and their first numerical experiment which illustrates this point.\nIn this first experiment, I wanted to see whether NS-SMC is competitive with tempering SMC on a less challenging target distribution, i.e. the good old logistic regression posterior, which is typically Gaussian like, and therefore unimodal.\nIn the plots below, I compare two instances of waste-free SMC, one based on a tempering sequence, the other on the NS sequence discussed in the previous post. Both algorithms derive automatically the next element in these sequences so that the ESS (effective sampling size) is \\(\\alpha N\\). Both rely on random walk Metropolis kernels, which are calibrated on the current particle sample.\nI consider the sonar dataset (dim=61). The plot below show how the MSE (over 100 runs) of the log-marginal likelihood evolves as a function of \\(\\alpha\\) for both algorithms; considered values for \\(\\alpha\\) are \\(0.05, 0.10, \\dots, 0.95\\). This plot is a bit misleading, because, when \\(\\alpha\\) changes, the CPU cost changes as well: the large \\(\\alpha\\) is, the larger is the number of intermediate distributions.\n\n\n\n\n\nSo let’s do a second plot, where the \\(y-\\)axis is the work-normalised MSE; that is, MSE times number of total evaluations of the likelihood (which is a good proxy for overall CPU cost). See below.\n\n\n\n\n\nBoth variants seems to lead to the same level of performance (i.e. CPU vs error trade-off). One point to note is that the best performance for NS is obtained by taking \\(\\alpha\\) small.\nBottom line: NS-SMC seems indeed competitive with tempering SMC. This is a bit surprising to me (as they rely on two very different sequences of distribution), but it shows that NS-SMC may deserve more scrutiny from the Bayesian computation community, I think.\n\n\nA limitation of vanilla NS\nAnother experiment, possibly of more limited interest. For the same type of target distributions (logistic regression posterior, this time for the Pima dataset), the plot below illustrates the bias of vanilla NS as a function of the number \\(k\\) of MCMC steps performed at each iteration. Recall that in vanilla NS, you discard one particle at each time \\(t\\) (the one with smallest likelihood), choose randomly one of the \\(N-1\\) remaining one, apply \\(k\\) MCMC steps to this selected particle, and add back the output to the particle sampler.\nThis plot suggests that NS may be biased if \\(k\\) is too small. I am not sure why this is happening. This may be because NS is valid only when \\(k\\to \\infty\\). Or maybe because of the adaptive MCMC strategy I’m using: as in the previous section, I use random walk Metropolis, and I recursively adapt the proposal covariance to the empirical covariance matrix of the \\(N\\) particles.\n\n\n\n\n\n\n\nHow to replicate these results\nI have added some time ago a nested module to particles, which implements both vanilla NS and NS-SMC. The numerical experiments reported above may be reproduced by running the scripts in folder papers/nested."
  },
  {
    "objectID": "posts/14-02-2024-quantum-bernoulli-factories/quantum-bernoulli-factories.html",
    "href": "posts/14-02-2024-quantum-bernoulli-factories/quantum-bernoulli-factories.html",
    "title": "Quantum workers in Bernoulli factories",
    "section": "",
    "text": "TL;DR: A quantum computer lets you provably build more general Bernoulli factories than your laptop.\nI have grown an interest for quantum computing, both for fun and because it naturally applies to sampling my favourite distribution, determinantal point processes. One of the natural (and still quite open) big questions in quantum computing is, for a given computational task such as solving a linear system, whether having access to a quantum computer gives you any advantage over using your laptop in the smartest way possible. Maybe the quantum computer lets you solve part of your problem faster, or maybe it allows you to solve a more general class of problems. Dale, Jennings, and Rudolph (2015) prove a quantum advantage of the latter kind, for a task that appeals to a computational statistician: a quantum computer gives you access to strictly more Bernoulli factories than your laptop does. In this post, I discuss one of their examples."
  },
  {
    "objectID": "posts/14-02-2024-quantum-bernoulli-factories/quantum-bernoulli-factories.html#bernoulli-factories",
    "href": "posts/14-02-2024-quantum-bernoulli-factories/quantum-bernoulli-factories.html#bernoulli-factories",
    "title": "Quantum workers in Bernoulli factories",
    "section": "Bernoulli factories",
    "text": "Bernoulli factories\nFirst, I need to define what a Bernoulli factory is. Loosely speaking, a Bernoulli factory is an algorithm that, when fed with i.i.d draws from a Bernoulli random variable \\(B(p)\\) with unknown parameter \\(p\\), outputs a stream of independent Bernoullis with parameter \\(f(p)\\). The algorithm does not have access to the value of \\(p\\), and needs to work for as large a range of values of \\(p\\) as possible. For instance, a trick attributed to von Neumann gives you a Bernoulli factory for the constant function \\(f\\equiv 1/2\\), can you guess how? If you have never seen this trick, take a break and think about it. Here is a hint: try to pair Bernoulli draws and define two events of equal probability.\nThe problem of determining what Bernoulli factories can be constructed on a classical (as opposed to quantum) computer has been answered by Keane and O’Brien (1994). Essentially, it is necessary and sufficient that \\((i)\\) \\(f\\) be continuous on its domain \\(\\mathcal{P}\\), and that \\((ii)\\) either \\(f\\) is constant or there exists an integer \\(n\\) such that, for all \\(p\\in\\mathcal{P}\\), \\[\n    \\min[ f(p), 1-f(p)] \\geq \\min [ p^n, (1-p)^n ].\n\\] In particular, a non-constant \\(f\\) should not take the values \\(0\\) or \\(1\\) in \\((0,1)\\), and cannot approach these extreme values too fast. In particular, the doubling function \\(f_\\mathrm{double}:p\\mapsto 2p\\) defined on \\([0,1/2]\\) does not correspond to a Bernoulli factory, while its restriction to \\([0,1/2-\\epsilon]\\) does, for any \\(\\epsilon&gt;0\\). Another simple example is \\[\n    f_\\mathrm{quadratic}:p\\mapsto 4p(1-p)\n\\tag{1}\\] defined on \\([0,1]\\), which does not correspond to a Bernoulli factory. Yet, the rest of the post shows that \\(f_\\mathrm{quadratic}\\) does correspond to a specific weakening of the notion of Bernoulli factory, one that is natural in quantum computing."
  },
  {
    "objectID": "posts/14-02-2024-quantum-bernoulli-factories/quantum-bernoulli-factories.html#quantum-computers-and-quantum-coins",
    "href": "posts/14-02-2024-quantum-bernoulli-factories/quantum-bernoulli-factories.html#quantum-computers-and-quantum-coins",
    "title": "Quantum workers in Bernoulli factories",
    "section": "Quantum computers and quantum coins",
    "text": "Quantum computers and quantum coins\nNow buckle up, because I need to define a mathematical model for a quantum computer. This model only requires basic algebra, albeit with strange notation. Let \\(N\\) be a positive integer, and \\[\n    \\mathbb{H} = (\\mathbb{C}^2)^{\\otimes N} = \\mathbb{C}^2\\otimes \\dots \\otimes \\mathbb{C}^2,\n\\] where the tensor product is taken \\(N\\) times. An \\(N\\)-qubit quantum computer is a machine that, when fed with\n\na positive semi-definite, Hermitian operator \\(\\rho\\) acting on \\(\\mathbb{H}\\), with trace norm \\(1\\) (the state),\na Hermitian operator \\(A\\) on \\(\\mathbb{H}\\) (the observable),\n\noutputs a draw from the random variable \\(X_{A,\\rho}\\), with support included in the spectrum of \\(A\\), defined by \\[\n    \\mathbb{E} g(X_{A,\\rho}) = \\mathrm{Tr}(\\rho g(A)), \\quad g:\\mathbb{H}\\rightarrow \\mathbb{R}_+.\n\\tag{2}\\] Here \\(g(A)\\) is the operator that has the same eigenvectors as \\(A\\), but where each eigenvalue \\(\\lambda\\) is replaced by \\(g(\\lambda)\\). The correspondence in Equation 2 between a state-observable pair and a probability distribution on the spectrum of the observable is a cornerstone of quantum physics called Born’s rule, and it is the only bit of quantum theory we shall need. In other words, we see a quantum computer as a procedure to draw from probability distributions parametrized by state-observable pairs. We give two fundamental examples of such state-observable pairs, which can be respectively interpreted as describing one quantum coin and two quantum coins.\nThe quantum coin. Consider a one-qubit computer, i.e. \\(N=1\\). Then \\(\\mathbb{H} = \\mathbb{C}^2\\) has dimension \\(2\\), and we fix an orthonormal basis, which we denote by \\((\\ket{0}, \\ket{1})\\). The strange notation \\(\\ket{\\cdot}\\) is inherited from physics, and is very practical in computations, as you will see. In short, denote by \\(\\braket{\\cdot\\vert\\cdot}\\) (a bracket, or bra-ket) the inner product in \\(\\mathbb{H}\\). Now, a vector in \\(\\mathbb{H}\\) is written \\(\\ket{v}\\) (a ket). Similarly, define the linear form \\(\\bra{v}\\) (a bra) by \\[\n    \\bra{v}: \\ket{u} \\mapsto \\braket{v\\vert u}.\n\\] By construction, we can write things like \\[\n\\bra{v} \\ket{u} = \\braket{v\\vert u},\n\\] so that the bra-ket notation for linear forms and vectors is consistent with the inner product.\nNow, remember we have fixed a basis \\((\\ket{0}, \\ket{1})\\) of \\(\\mathbb{H}\\). For \\(p\\in[0,1]\\), we define \\[\n    \\ket{p} = \\sqrt{1-p} \\ket{0} + \\sqrt{p}\\ket{1}.\n\\] This definition is consistent with earlier notation, as \\(\\ket{p} = \\ket{0}\\) when \\(p=0\\), for instance. Now, we define a quantum coin as the state \\(\\rho_{\\mathrm{qc}} = \\ket{p}\\bra{p}\\). It is the projection onto \\(\\mathbb{C}\\ket{p}\\), and in particular it is a positive semi-definite, Hermitian operator of trace \\(1\\), and hence a valid state. As observable, we take the projection onto the second vector of the basis, which we denote in the bra-ket notation by \\(\\ket{1}\\bra{1}\\). What random variable \\(X_{\\ket{1}\\bra{1}, \\rho_{\\mathrm{qc}}}\\) does this state-observable pair define in Equation 2?\nWell, the spectrum of the observable is \\(\\{0,1\\}\\), so we have defined a Bernoulli random variable. Moreover, the probability that it is equal to \\(1\\) is given by taking \\(g:\\lambda\\mapsto \\mathbf{1}_{\\lambda=1}\\) in Equation 2, yielding \\[\n    \\mathbb{P}(X_{\\ket{1}\\bra{1}, \\rho_{\\mathrm{qc}}} = 1) = \\mathrm{Tr}\\left[ \\ket{1}\\bra{1} \\ket{p}\\bra{p}  \\right] = \\vert \\braket{1\\vert p}\\vert^2 = p.\n\\] by cyclicity of the trace. All of this to define a \\(B(p)\\) variable! Things get more interesting when you try to create two dependent Bernoulli variables.\nTwo quantum coins. Consider now a computer with two qubits, so that the Hilbert space is \\(\\mathbb{H}=\\mathbb{C}^2\\otimes\\mathbb{C}^2\\). From our orthonormal basis \\((\\ket{0}, \\ket{1})\\) of \\(\\mathbb{C}^2\\), we can build an orthonormal basis \\((\\ket{i}\\otimes\\ket{j}, i,j\\in\\{0,1\\})\\) of \\(\\mathbb{H}\\). To keep expressions short, it is customary to write \\(\\ket{i}\\otimes\\ket{j}\\) as \\(\\ket{ij}\\). To define a pair of quantum coins, we now consider the tensor product of two quantum coins, \\[\n    \\ket{p}\\otimes \\ket{p} = (1-p) \\ket{00} + \\sqrt{p(1-p)}\\ket{01} + \\sqrt{p(1-p)}\\ket{10}+ p \\ket{11}.\n\\] We think of the corresponding state \\(\\rho_{2\\mathrm{qc}} = (\\ket{p}\\otimes \\ket{p})(\\bra{p}\\otimes \\bra{p})\\) as two quantum coins. Now consider for your observable an operator \\(B\\) with four distinct eigenvalues, say \\(\\lambda_{ij} \\in\\mathbb{C}\\) for \\(i, j\\in\\{0,1\\}\\), each corresponding to eigenvector \\(\\ket{ij}\\). In other words, the spectral decomposition of \\(B\\) is \\[\n    B = \\sum_{i, j\\in\\{0,1\\}} \\lambda_{ij} \\ket{ij}\\bra{ij}.\n\\] The random variable \\(X_{B, \\rho_{2\\mathrm{qc}}}\\), associated through Equation 2 to two quantum coins and our newly defined observable \\(B\\), has support in \\[\n    \\{\\lambda_{00}, \\lambda_{01}, \\lambda_{10}, \\lambda_{11}\\}.\n\\] Moreover, taking \\(g:\\lambda\\mapsto \\mathbf{1}_{\\lambda=\\lambda_{ij}}\\) in Equation 2, we obtain \\[\n    \\mathbb{P}(X_{B, \\rho_{2\\mathrm{qc}}} = \\lambda_{ij}) = \\mathrm{Tr}\\left[(\\ket{p}\\otimes \\ket{p})(\\bra{p}\\otimes \\bra{p}) \\ket{ij}\\bra{ij}\\right] = p^{i}(1-p)^{1-i} \\times p^{j}(1-p)^{1-j},\n\\] again by cyclicity of the trace and then carefully distributing our multiplication, noting that most terms are zero by orthogonality. Otherly put, the indices of \\(X_{B, \\rho_{2\\mathrm{qc}}}\\) are a pair of independent Bernoullis with equal parameter \\(p\\). Again, this might feel like a lot of algebraic pain for no gain, but wait for it.\nWhat if we had taken the same state, but with another observable? Say the observable with four distinct eigenvalues \\(\\lambda_{\\phi^+}, \\lambda_{\\phi-}, \\lambda_{\\psi+}, \\lambda_{\\psi-}\\in \\mathbb{C}\\), and corresponding eigenvectors \\[\n    \\ket{\\phi^{\\pm}} = \\frac{\\ket{00}\\pm\\ket{11}}{\\sqrt{2}}, \\quad\n    \\ket{\\psi^{\\pm}} = \\frac{\\ket{01}\\pm\\ket{10}}{\\sqrt{2}}.\n\\] Then, the random variable \\(X_{C, \\rho_{2\\mathrm{qc}}}\\) defined by Born’s rule in Equation 2 is supported in \\[\n    \\{\\lambda_{\\phi^+}, \\lambda_{\\phi-}, \\lambda_{\\psi+}, \\lambda_{\\psi-}\\},\n\\] with \\[\n    \\mathbb{P}(X_{C, \\rho_{2\\mathrm{qc}}} = \\lambda_{\\phi^+}) = \\mathrm{Tr\\left[ \\rho_{2\\mathrm{qc}} \\ket{\\phi^+}\\bra{\\phi^+} \\right]} = \\vert (\\bra{p}\\otimes\\bra{p})\\ket{\\phi^+} \\vert^2 = \\frac12.\n\\] Similarly, \\[\n    \\mathbb{P}(X_{C, \\rho_{2\\mathrm{qc}}} = \\lambda_{\\phi^-}) = \\vert (\\bra{p}\\otimes\\bra{p})\\ket{\\phi^-} \\vert^2 = \\frac{(2p-1)^2}{2},\n\\] \\[\n    \\mathbb{P}(X_{C, \\rho_{2\\mathrm{qc}}} = \\lambda_{\\psi^+}) = \\vert (\\bra{p}\\otimes\\bra{p})\\ket{\\psi^+} \\vert^2 = 2p(1-p),\n\\] and \\[\n    \\mathbb{P}(X_{C, \\rho_{2\\mathrm{qc}}} = \\lambda_{\\psi^-}) = \\vert (\\bra{p}\\otimes\\bra{p})\\ket{\\psi^-} \\vert^2 = 0.\n\\] You can check that the four probabilities sum to \\(1\\). This time, if you map, e.g., \\(\\phi_+\\) to the string \\(00\\), \\(\\phi^-\\) to \\(11\\), \\(\\psi^+\\) to \\(01\\), and \\(\\psi^-\\) to \\(10\\), we no longer have independent Bernoulli draws, but a rather strange correlation structure. We shall see that \\(X_{C,\\rho_{2\\mathrm{qc}}}\\) allows us to build a Bernoulli factory that is beyond the reach of a classical computer."
  },
  {
    "objectID": "posts/14-02-2024-quantum-bernoulli-factories/quantum-bernoulli-factories.html#a-quantum-bernoulli-factory",
    "href": "posts/14-02-2024-quantum-bernoulli-factories/quantum-bernoulli-factories.html#a-quantum-bernoulli-factory",
    "title": "Quantum workers in Bernoulli factories",
    "section": "A quantum Bernoulli factory",
    "text": "A quantum Bernoulli factory\nImagine the following procedure. Draw the random variable \\(X_{C,\\rho_{2\\mathrm{qc}}}\\). If you obtain \\(\\lambda_{\\phi^-}\\) or \\(\\lambda_{\\psi^+}\\), then stop, and respectively output \\(0\\) and \\(1\\). Otherwise, draw another independent realization of \\(X_{C,\\rho_{2\\mathrm{qc}}}\\), etc. This is reminiscent of the von Neumann trick we mentioned earlier. What have we achieved? Well, the output is a Bernoulli draw with parameter \\[\n    \\frac{2p(1-p)}{2p(1-p)+\\frac{(2p-1)^2}{2}} = 4p(1-p).\n\\] Repeating the procedure as many times as you want draws, we thus have a Bernoulli factory for \\(f_{\\mathrm{quadratic}}\\) in Equation 1, which we know to be beyond the reach of classical Bernoulli factories!\nThe difference is that our Bernoulli factory is a quantum Bernoulli factory. In particular, our basic resource is (physically) independent copies of \\(\\ket{p}\\). This is asking for strictly more than (statistically) independent Bernoulli draws. Indeed, depending on your observable, two physically independent copies of \\(\\ket{p}\\) can give you two i.i.d. Bernoullis \\(X_{B,\\rho_{2\\mathrm{qc}}}\\), or something more complicated like \\(X_{C,\\rho_{2\\mathrm{qc}}}\\). If you consider as equivalent the cost of preparing the two types of inputs, i.i.d. Bernoullis \\(B(p)\\) on one side and physically independent copies of \\(\\ket{p}\\) on the other side, then you have a quantum advantage. It might be a big assumption, but I find it easier to swallow than similar caveats in other quantum advantages that I’ve read about."
  },
  {
    "objectID": "posts/14-02-2024-quantum-bernoulli-factories/quantum-bernoulli-factories.html#further-remarks",
    "href": "posts/14-02-2024-quantum-bernoulli-factories/quantum-bernoulli-factories.html#further-remarks",
    "title": "Quantum workers in Bernoulli factories",
    "section": "Further remarks",
    "text": "Further remarks\nThe example in this post is from the paper by Dale, Jennings, and Rudolph (2015). The authors further characterize the Bernoulli factories that you can build with only single-qubit operations: they strictly include classical Bernoulli factories and the example from this post. In other words, it is not necessary to use pairs of qubits to build \\(X_{C,\\rho_{2\\mathrm{qc}}}\\). Since then, there has been more work on quantum Bernoulli factories, for instance considering quantum-to-quantum Bernoulli factories, where the goal is to create independent copies of \\(\\ket{f(p)}\\) rather than a stream of Bernoulli random variables.\nI thank my group for valuable comments during the writing of this post. One non-consensual point is that I have tried to reduce the quantum formalism to the correspondence in Equation 2 between a state-observable pair and a random variable. This has the advantage of keeping the necessary algebra to a minimum, but it forced me to introduce rather abstract observables, with a spectrum that we only use through its indices. A more standard (but arguably lengthier) treatment might have involved projection-valued measures."
  },
  {
    "objectID": "posts/22-08-2023-monte-carlo-rates/monte_carlo_rates.html",
    "href": "posts/22-08-2023-monte-carlo-rates/monte_carlo_rates.html",
    "title": "Better than Monte Carlo (this post is not about QMC)",
    "section": "",
    "text": "(This is repost from this December 2022 post on the old website, but since math support is so poor on Wordpress, I’d rather have this post published here.)\nSay I want to approximate the integral \\[I(f) := \\int_{[0, 1]^s} f(u) du\\] based on \\(n\\) evaluations of function \\(f\\). I could use plain old Monte Carlo: \\[\\hat{I}(f) = \\frac 1 n \\sum_{i=1}^n f(U_i),\\quad U_i \\sim \\mathrm{U}([0,\n1]^s).\\] whose RMSE (root mean square error) is \\(O(n^{-1/2})\\).\nCan I do better? That is, can I design an alternative estimator/algorithm, which performs \\(n\\) evaluations and returns a random output, such that its RMSE converge quicker?\nSurprisingly, the answer to this question has been known for a long time. If I am ready to focus on functions \\(f\\in\\mathcal{C}^r([0, 1]^s)\\), Bakhvalov (1959) showed that the best rate I can hope for is \\(O(n^{-1/2-r/s}).\\) That is, there exist algorithms that achieve this rate, and algorithms achieving a better rate simply do not exist.\nOk, but how can I actually design such an algorithm? The proof of Bakhvalov contains a very simple recipe. Say I am able to construct a good approximation \\(f_n\\) of \\(f\\), based on \\(n\\) evaluations; assume the approximation error is \\(\\|f-f_n\\|_\\infty = O(n^{-\\alpha})\\), \\(\\alpha&gt;0\\). Then I could compute the following estimator, based on a second batch of \\(n\\) evaluations: \\[ \\hat{I}(f)\n:= I(f_n) +  \\frac 1 n \\sum_{i=1}^n (f-f_n)(U_i),\\quad U_i \\sim\n\\mathrm{Uniform}([0, 1]^s).\\] and it is easy to check that this new estimator is unbiased, that its variance is \\(O(n^{-1-2\\alpha})\\), and therefore its RMSE is \\(O(n^{-1/2-\\alpha})\\). (It is based on \\(2n\\) evaluations.)\nSo there is strong relation between Bakhvalov results and function approximation. In fact, the best rate you can achieve for the latter is \\(\\alpha=r/s\\), which explain the rate above for stochastic quadrature. You can see now why I gave this title to this post. QMC is about using points that are better than random points. But here I’m using IID points, and the improved rate comes from the fact I use a better approximation of \\(f\\).\nHere is a simple example of a good function approximation. Take \\(s=1\\), and \\[\nf_n(u) = \\sum_{i=1}^n f( \\frac{2i-1}{2n} ) \\mathbf{1}_{[(i-1)/n, i/n]}(u);\n\\] that is, split \\([0, 1]\\) into \\(n\\) intervals \\([(i-1)/n, i/n]\\), and approximate \\(f\\) inside a given interval by its value at the centre of the interval. You can quickly check that the approximation error is then \\(O(n^{-1})\\) provided \\(f\\) is \\(C^1\\). So you get a simple recipe to get the optimal rate for \\(s=1\\) and \\(r=1\\).\nIs it possible to generalise this type of construction to any \\(r\\) and any \\(s\\)? The answer is in our recent paper with Mathieu Gerber, which you can find here. You may also want to read Novak (2016), which is a very good entry on stochastic quadrature, and in particular gives a nice overview of Bakhvalov’s and related results."
  },
  {
    "objectID": "posts/04-06-2025-simpler-nested-sampling-identity/nested.html",
    "href": "posts/04-06-2025-simpler-nested-sampling-identity/nested.html",
    "title": "A simpler nested sampling identity",
    "section": "",
    "text": "\\[\n\\newcommand{\\ind}{\\mathbb{1}}\n\\]\n\nIn this post, I am trying to come up with a simple introduction to NS (nested sampling), through the lens of SMC samplers. It should be interesting to readers who are familiar with the latter but not with the former.\nThis post is inspired by this paper by Salomone et al, which has just been accepted in JRSSB. Congrats to the authors!\n\nSet up\nConsider a model with parameter \\(x\\), prior \\(p(x)\\), and likelihood \\(L(x)\\). The posterior is then \\[\\pi(x) = \\frac{p(x)L(x)}{Z},\\quad Z = \\int p(x)L(x)dx.\\] (The Bayesian interpretation is not essential. More generally, \\(p\\) could be a proposal distribution, \\(\\pi\\) a target distribution, and \\(L\\) a function proportional to \\(\\pi/p\\).)\nLet’s now introduce the following family of distributions: \\[\\pi_\\lambda(x) = \\frac{p(x) \\ind\\{ L(x) &gt; \\lambda\\}}{Z(\\lambda)},\\quad\nZ(\\lambda) = \\mathbb{P}_\\mathrm{prior}(L(X) &gt; \\lambda).\\] In words, \\(\\pi_\\lambda\\) is the prior truncated to the region \\(\\{x: L(x) &gt; \\lambda\\}\\), and the normalising constant \\(Z(\\lambda)\\) is the prior probability that \\(L(X)&gt;\\lambda\\).\nIf we introduce a sequence \\(0=\\lambda_{0} &lt; \\lambda_1 &lt; \\dots &lt; \\lambda_{T+1} =\n\\infty\\), we can use a SMC sampler to approximate recursively \\(\\pi_{\\lambda_t}\\) and its normalising constant \\(Z(\\lambda_t)\\). Note that the particle weights at each time will be 0 or 1 in this particular SMC sampler, since: \\[ \\frac{\\pi_{\\lambda_t}(x)}{\\pi_{\\lambda_{t-1}}(x)} \\propto \\ind\\{L(x) &gt;\n\\lambda_t\\}.\n\\]\n\n\nThe simpler NS identity\nNow comes the identity. Let \\(\\gamma(\\varphi) = \\int p L \\varphi\\) for an arbitrary function \\(\\varphi\\) of \\(x\\). Then: \\[\\begin{align*}\n\\gamma(\\varphi) & = \\int p L \\varphi \\\\\n    & = \\sum_{t=0}^T \\int p L \\varphi \\ind\\{ \\lambda_{t} &lt; L \\leq \\lambda_{t+1} \\} \\\\\n    & = \\sum_{t=0}^T Z(\\lambda_t) \\pi_{\\lambda_t}\\left(L \\varphi \\times \\ind\\{ L \\leq\n    \\lambda_{t+1}\\}\\right)\n\\end{align*}\n\\]\nThus, if we implement a SMC sampler that tracks the sequence \\(\\pi_{\\lambda_t}\\), we will be able to approximate all the above quantities, and thus, through this identity, to approximate the marginal likelihood, \\(Z=\\gamma(1)\\), and posterior moments, \\(\\pi(\\varphi) = \\gamma(\\varphi) / \\gamma(1)\\).\n\n\nChoosing the \\(\\lambda_t\\)’s\nIn practice, we need to choose the \\(\\lambda_t\\)’s. As in tempering, it seems reasonable to set them automatically, in such a way that the ESS (effective sample size) is \\(\\alpha N\\), for some \\(\\alpha\\in(0, 1)\\). Because the weight function is \\(0/1\\), this amounts to taking \\(\\lambda_t\\) to be the \\(\\alpha-\\)upper quantile of the \\(L(X_t^n)\\), where the \\(X_t^n\\)’s are the \\(N\\) particles sampled at time \\(t\\) by our SMC sampler. This is what Salomone et al recommend. In this case, we can replace \\(Z(\\lambda_t)\\) in the identity above by \\(\\alpha^t\\), at least for \\(t&lt;T\\).\nThe corresponding estimate will be something like: \\[\n\\widehat{\\gamma}(\\varphi)\n     = \\sum_{t=0}^{T-1} \\alpha^t \\left[ \\frac{1}{N} \\sum_{n=1}^N \\varphi(X_{t+1}^n) L(X_{t+1}^n)\n    \\ind\\{ L(X_{t+1}^n) \\leq \\lambda_{t+1}\\} \\right] + \\dots\n\\] where I omitted the \\(T-\\)th term (it has a slightly different expression, i.e. \\(Z(\\lambda_T)\\neq \\alpha^T\\)), and I used the fact that the unweighted sample \\(X_{t+1}^{1:N}\\) generated at the beginning of iteration \\(t+1\\) currently targets \\(\\pi_{\\lambda_t}\\).\n\n\nVanilla NS as a particular waste-free SMC sampler\nNow assume that, in your adaptive NS-SMC sampler, you set \\(\\alpha=(1 - \\frac 1\nN)\\) (or equivalently, \\(\\lambda_{t+1}=\\min_n L(X_{t+1}^n)\\)); that is, you discard only one particle, the one with smallest likelihood. In other words, you decide to move as slowly as possible up the likelihood function.\nIf you’d resample the \\(N-1\\) surviving particles, and apply \\(k\\) MCMC step to each of them, you would get a very expensive sampler: increasing \\(N\\) means you both increase the cost of a single iteration, and the total number of iterations (since it makes \\(\\alpha\\) larger).\nA cheaper alternative is to choose randomly one of the \\(N-1\\) surviving particles, apply it a MCMC step, and takes the output as your new \\(N-\\)th particle. Then, you get an algorithm which is very close to the original NS one. In particular, your estimate of \\(Z=\\gamma(1)\\) becomes: \\[\n\\widehat{\\gamma}(1)\n     = \\sum_{t=0}^{T-1} \\frac{1}{N} (1- \\frac 1 N)^t L_{t+1} + \\dots\n\\] with \\(L_{t+1} = \\min_n L(X_{t+1}^n)\\). (The original NS estimate has \\((1-1/N)^t/N\\) replaced by \\(\\exp(-t/N) - \\exp(-(t+1)/N)\\), which should be very close numerically for large \\(N\\).)\nThis idea of resampling \\(N-1\\) particles, and move only one of them is reminiscent of waste-free SMC. In waste-free SMC, you resample only \\(M\\) particles out of \\(N\\), \\(M&lt;N\\). Then, assuming \\(M\\) divides \\(N\\), i.e., \\(N=M\\times P\\) for some \\(P\\geq 2\\), you apply to each resampled particle \\((P-1)\\) MCMC steps, and gather the resulting \\(M\\times\nP\\) states to form a new particle sample of size \\(N\\). What if \\(M\\) does not divide \\(N\\), i.e. \\(N=M \\times k +r\\), \\(0&lt;r&lt;M\\)? Then it makes sense to generate \\(r\\) MCMC chains of length \\(k+1\\), and \\(M-r\\) chains of length \\(k\\). This is what happens here, with \\(M=N-1\\), \\(r=1\\).\n\n\nWhy did I say we get a “simpler” identity?\nThe original NS algorithm by Skilling derives essentially the same identity as above, but through more convoluted steps, which involves the CDF of random variable \\(L(X)\\), when \\(X\\sim p\\), its inverse, Beta distributions, etc. I find the derivation above simpler (at least, again, if you are familiar with SMC samplers). Of course, in return, you get a justification which is a bit hand-wavy for vanilla NS (but for NS-SMC, it is perfectly solid).\n\n\nShould I care about NS?\nThere are two sub-questions:\n\nNS vs SMC-NS: Salomone et al give numerical evidence (and arguments) suggesting that NS-SMC outperforms NS.\nSMC-NS vs tempering SMC or other SMC schemes: Salomone et al also give numerical evidence suggesting NS-SMC is competitive with tempering SMC, which is intriguing (and in line with independent numerical experiments I did).\n\nI will elaborate on these two points in my next post (coming soon). In the meantime, feel free to have a look at the aforementioned paper, it is well worth a read."
  },
  {
    "objectID": "posts/25-04-2024-numpy-broke-my-heart/numpy-broke-my-heart.html",
    "href": "posts/25-04-2024-numpy-broke-my-heart/numpy-broke-my-heart.html",
    "title": "Numpy broke my heart",
    "section": "",
    "text": "I swear, the title is kind of funny in French (try to figure out why). Anyway, in this post I wanted to dispel a misconception I had until recently on python, numpy and multi-processing, and which led me to say something silly in our SMC book.\n\n\n\nno comment\n\n\n\nPython and multi-processing\nMost modern computers have several CPU cores; I guess even potato computers have a least two these days? On the other hand, a program written in Python will be executed on a single core, because of the GIL. This means that all the other cores will stay idle while you run your program. Which is frustrating when said program takes forever to complete.\nThere are different ways to make all your CPU cores work for you, but I will discuss the only two ways which I am (a bit familiar) with:\n\nUse joblib or a similar library. (But seriously, just use joblib, it’s great.) This requires a bit of work, as you have to state explicitly which parts of you program may be turned into independent tasks that will be performed in parallel. The typical use case for me is to run several times the same SMC algorithm (perhaps with different parameters, e.g. a different number of particles); see for instance this.\nDo nothing, and pray that your program rely on those Numpy operations which are already parallelised for you (multithreaded). Numpy rely on low-level (C/Fortran) linear algebra libraries such as BLAS and LAPACK, and these libraries are able to implement certain operations (e.g. matrix multiplication) on multiple cores. In this case, your python script still runs on a single core, but, when it encounters a multithreaded numpy operation, this operation spawns (temporarily, for this operation only) several threads that are executed on different cores.\n\n\n\nMy bad\nOk, now for my misconception (a.k.a. what a idiot I am.) When I run on a standard PC the following script, which implements the numerical experiment of Chapter 17 (on SMC samplers) in our book, all the cores are kept busy during the execution. This script does not rely on any form of explicit parallelism. Several SMC samplers are run, but sequentially (I don’t use multiSMC in this script). So clearly it’s numpy that is doing its thing (point 2 above). In fact, by profiling it, one can see that most of the CPU time is spent in the one line that computes the log-likelihood of the logistic regression model, and this involves a matrix multiplication. So this makes sense.\nIn the book (page 352 if you want to check), I said naively: if you have k cores, you get a x k speed-up for free in this particular experiment. I thought that that was the case, because all my CPU cores were 100% busy the whole time.\nHowever, I did some more testing recently and tried to compare the running time of this script when numpy does multithreading and when it does not. (See here on how you may disable multithreading in numpy.)\n\nOn a standard PC, the speed-up is more like… one per-cent?\nOn a certain cloud-based architecture that I’m currently playing with (and which rely on kubernetes containers), multithreading can actually slow down the script by a factor of 10 or more.\n\n\n\nWhat’s going on?\nI am not sure, I’m a bit out of my depth here. I guess what happens is that, for this particular script, the speed-up brought by multithreading is cancelled by the time it takes to generate new threads at the beginning of the numpy operation. (Remember that this must be done each time a line with a multithreaded numpy operation is executed.) In fact, the multithreaded operation seems to be a matrix/vector mutiplication, where the matrix is not very large. (It’s of size \\((N, d)\\), where \\(N\\) is the number of particles. I tried to increase N several times over, but it did not change the results.)\nAnd things may get worse in containers, where either numpy might do wrong assumptions on the available resources, or you simply share resources with many other users. (Disclaimer, I don’t know what I’m talking about.)\nAlso, of course, this kind or results may depend on your hardware, the version of python and related libraries you are using (in particular whether you use the openBLAS version of BLAS of the MKL one which is specific to Intel CPUs, to see this, check the output numpy.config() on your machine.) and so on. The picture below summaries the situation.\n\n\n\nAlice decided to better understand multiprocessing in Python\n\n\n\n\nEnter joblib\nThe discussion above assumes you run a single program, and that Numpy may or may not get access to all the cores. What if you try to implement multi-processing (using joblib, multiprocessing or something else), but each task perform numpy operations? You could have a over-subscription problem, that is, you end up with many threads (more than the number of cores), and the computer wastes a lot of time trying to juggle between all these threads.\nFortunately, joblib is smart enough to tell numpy to calm down and generate fewer threads. This point is discussed here inin the documentation. Well worth a read.\nI managed to speed up my script significantly by using joblib, but I still cannot obtain a x 24 factor on my niffy 24-core PC. I am still crying investigating.\n\n\nTake-home messages\n\nIt’s not because all your 20 CPU cores are busy that your script is running 20 times faster.\nIf you actually want to achieve a substantial speed-up in a multi-core hardware, you might need to try different things, and check the actual results (i.e. measure the total running time).\nRead this and this if you want to learn more about multiprocessing and numpy, I found these pages clear and authoritative on this topic.\ndon’t believe everything you read in books? :-)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statisfaction - a collaborative blog about Bayesian computation and related topics",
    "section": "",
    "text": "Nested sampling and SMC: numerical experiments\n\n\n\nNested sampling\n\nSMC\n\nnumerics\n\n\n\n\n\n\n\n\n\nJun 30, 2025\n\n\nNicolas Chopin\n\n\n\n\n\n\n\n\n\n\n\n\nA simpler nested sampling identity\n\n\n\nSMC\n\nnested sampling\n\npaper\n\n\n\n\n\n\n\n\n\nJun 4, 2025\n\n\nNicolas Chopin\n\n\n\n\n\n\n\n\n\n\n\n\nNumpy broke my heart\n\n\n\npython\n\njoblib\n\nmultiprocessing\n\nnumpy\n\n\n\n\n\n\n\n\n\nApr 25, 2024\n\n\nNicolas Chopin\n\n\n\n\n\n\n\n\n\n\n\n\nQuantum workers in Bernoulli factories\n\n\n\nquantum computing\n\nsimulation\n\n\n\n\n\n\n\n\n\nFeb 14, 2024\n\n\nRémi Bardenet\n\n\n\n\n\n\n\n\n\n\n\n\nCoulomb rhymes with variance reduction\n\n\n\nMonte Carlo\n\npoint processes\n\n\n\n\n\n\n\n\n\nNov 1, 2023\n\n\nRémi Bardenet\n\n\n\n\n\n\n\n\n\n\n\n\nparticles version 0.4: single-run variance estimates, FFBS variants, nested sampling\n\n\n\nnews\n\nparticles\n\nSMC\n\n\n\n\n\n\n\n\n\nSep 1, 2023\n\n\nNicolas Chopin\n\n\n\n\n\n\n\n\n\n\n\n\nBetter than Monte Carlo (this post is not about QMC)\n\n\n\nMonte Carlo\n\nQMC\n\nrates\n\n\n\n\n\n\n\n\n\nAug 19, 2023\n\n\nNicolas Chopin\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome to the new, quarto-based version of Statisfaction\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nAug 19, 2023\n\n\nNicolas Chopin\n\n\n\n\n\nNo matching items"
  }
]